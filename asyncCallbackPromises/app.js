/**
 *
 *
 *      Asynchronous Code, Callbacks & Promises
 *
 *
 *
 *
 *
 *
 *
 */




//                     THE CALL STACK
// The JS interperter uses to keep track of its place in a script that calls multiple functions.
// HOW JS "knows" what function is currently being run and what functions are called from within that function

// HOW IT WORKS
// When the script calls a function the interpreter adds it to the call stack and then starts carrying out the function.
// Any function that are called by that function are added to the call stack further up, and run where their calls are reached
// When the current function is finished, the interpreter takes it off the stack and resumes execution where it left off in the last code listing.





// const repeat = (str, times) => {
//   let result = '';
//   for (let i = 0; i < times; i++) {
//     result += str
//   }
//   return result
// }

// const scream = (str) => {
//   return str.toUpperCase() + '!!!'
// }

// const getRantText = (phrase) => {
//   let text = scream(phrase);
//   let rant = repeat(text, 8)
//   return rant;
// }

// const makeRant = (phrase, el) => {
//   const h1 = document.createElement('h1')
//   h1.innerText = getRantText(phrase);
//   el.appendChild(h1)
// }

// makeRant('I hate mayo', document.body)
// makeRant('If you have to cough, please cover your stinky mouth', document.body)


































// //                         JS IS SINGLE THREADED
// // READS 1 LINE AT A TIME
// // THE BROWSER HAS SOMETHING THAT CAN LET YOU CALL FOR AN API AND NOT STOP THE WHOLE WEBPAGE TILL ITS DONE


// // 1
// console.log('I HAPPEN FIRST!');

// // 2 alert blocks the second console.log until ok is pressed
// alert('HI THERE')

// // 3
// console.log('I HAPPEN SECOND!');













































//        HOW ASYNCHRONOUS CALLBACKS ACTUALLY WORK



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































