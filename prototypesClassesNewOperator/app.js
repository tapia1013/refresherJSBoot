/**
 *
 *
 *       PROTOTYPES, CLASSES, & THE NEW OPERATOR
 *
 *
 * OBJECT OREIENTED PROGRAMMING JAVASCRIPT
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */









// //            WHAT IS A PROTOTYPE
// // PROTOTYPES ARE THE MECHANISM BY WHICH JS OBJECTS INHERIT FEATURES FROM ONE ANOTHER, HOW PROTOTYPES CHAINS WORK AND LOOK AT HOW THE PROTOTYPE PROPERTY CAN BE USED TO ADD METHODS TO EXISTING CONSTRUCTORS

// // ALL THE METHODS LIKE .PUSH(), .POP(), .FILTER(), .FIND() AND ETC... ARE IN __PROTO__ AND NOT ON THE ARRAY OR OBJECT OR VARIABLE OR FUNCTION ITSELF

// // PROTO IS THE TEMPLATE OBJECT FOR ARRAYS AND FUNCTIONS, IT CONTAINS PREBUILT METHODS THAT WE CAN USE ON EVERY FUNCTION ARR OBJ STRING ETC... THAT EVERY JS BLOCK CODE HAS ACCESS TO

// // __proto__ is a reference to prototype it shows when we call a function or varaible and that variable has a __proto__ which is a reference to prototype

// // ITS WHERE ALL THE METHODS ARE STORED

// /********************
//  *  THIS WILL HELP US UNDERSTAND OOP BUT THIS ISNT VERY USEFUL 
//  * 
//  * *****************/




// //        LETS CREATE A PROTO
// // String.prototype.grumpus = () => alert('GO AWAY!')
// // const cat = "blue"
// // // gives us an alert "GO AWAY"
// // cat.grumpus()


// // create method
// String.prototype.yell = function () {
//   return `OMG ${this.toUpperCase()}`
// }

// // replace pop method
// Array.prototype.pop = function () {
//   return `NAHH WONT POP FOO`
// }













































/**
 *     INTRO TO OBJECT ORIENTED PROGRAMMING (OOP)
 *
 *
 */



// OOP is just like a template or a reciepe that we can reuse over and over and that is easy to use






























































































































































































































































































































































































































































































































































































































































































